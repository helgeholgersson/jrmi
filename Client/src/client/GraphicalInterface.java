/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * GraphicalInterface.java
 *
 * Created on 2013-maj-27, 12:29:23
 */
package client;

import java.awt.Toolkit;
import java.awt.datatransfer.Clipboard;
import java.awt.datatransfer.StringSelection;
import java.awt.event.KeyEvent;
import javax.swing.DefaultListModel;
import javax.swing.JOptionPane;

/**
 *
 * @author Andréas Forsbom
 */
public class GraphicalInterface extends javax.swing.JFrame {
    private int activeList = 0; // 0 == inaktiv, 1 == osorterad, 2 == sorterad, detta är vilka knapparna move up, move down, remove element skall ändra i.
    
    /** Konstrutkro för GUI-klassen, genererar två listor */
    public GraphicalInterface() {
        initComponents();
        jList1.setModel(new DefaultListModel());
        jList2.setModel(new DefaultListModel());
    }
    
    /** Extraherar en array från en jList */
    private long[] getArrayFromList(){
        DefaultListModel l = (DefaultListModel) jList1.getModel();
        int listSize = l.size();
        long[] nums = new long[listSize];
        for(int i=0; i<listSize; i++){
            nums[i] = Long.parseLong(l.getElementAt(i).toString());
        }
        return nums;
    }

    /** Tar en input från en jTextField och sätter in i en jList */
    private void addNumToList(String i){
        i = i.replaceAll("[^0-9 ]","");
        if(!i.isEmpty()){
            if(i.length() > 19){
                i = i.substring(0, 19);
            }
            try{
                DefaultListModel l = (DefaultListModel) jList1.getModel();
                l.addElement(i);
                jList1.setModel(l);
                jTextField1.setText("");
                jButton1.setEnabled(false);
                activateSortButton();
            } catch (Exception E) {JOptionPane.showMessageDialog(null, "Error!\n"+E);}
        } 
    }

    /** Lägger till en array i listan för sorterade arrayer
     * @param arr - arrayen som läggs in i listan
     */
    private void addSortedArray(long[] arr){
        try{
            DefaultListModel l = (DefaultListModel) jList2.getModel();
            l.removeAllElements();
            for(int i = 0; i < arr.length; i++){
                l.addElement(arr[i]);
            }
            jList2.setModel(l);
            jTextField1.setText("");
        } catch (Exception E) {JOptionPane.showMessageDialog(null, "Error!\n"+E);}
    }

    /** Flytta den sorterade listan till den osorterade listan */
    private void moveSortedListToUnsortedList(){
        try{
            if(jList2.getModel().getSize() > 0) {
                DefaultListModel sl = (DefaultListModel) jList2.getModel();
                DefaultListModel ul = (DefaultListModel) jList1.getModel();
                ul.removeAllElements();
                int lengthOfSorted = sl.size();
                long[] arr = new long[lengthOfSorted];
                for(int i = 0; i < lengthOfSorted; i++){
                    arr[i] = Long.parseLong(sl.getElementAt(i).toString());
                    ul.addElement(arr[i]);
                }
                activateSortButton();
            } else{
                JOptionPane.showMessageDialog(null, "Sorted list is empty, will not copy...");
            }
        } catch (Exception E) {JOptionPane.showMessageDialog(null, "Error while moving list!\n"+E);}
    }
    
    /* Begränsar längden på siffrorna man skriver in */
    private void limitInputField(){
        if(jTextField1.getText().length() > 19){
            jTextField1.setText(jTextField1.getText().substring(0, 19));
        }
    }
    
    /* Aktivera list-hanteringsknapparna*/
    private void activateListHandleBtns(){
    jButton2.setEnabled(true);
    jButton3.setEnabled(true);
    jButton4.setEnabled(true);
}

    /* Aktivera de specifika knapparna för sorterade listan */
    private void activateSortedListBtns(){
        jButton6.setEnabled(true);
        jButton7.setEnabled(true);
    }
    
    /* Aktivera sorteringsknappen */
    private void activateSortButton(){
        jButton5.setEnabled(true);
    }

    /* Avaktivera list-hanteringsknapparna*/
    private void disableListHandleBtns(){
        jButton2.setEnabled(true);
        jButton3.setEnabled(true);
        jButton4.setEnabled(true);
    }

    /* Avaktivera de specifika knapparna för sorterade listan */
    private void disableSortedListBtns(){
        jButton6.setEnabled(true);
        jButton7.setEnabled(true);
    }
    /* Avktivera sorteringsknappen */
    private void disableSortButton(){
        jButton5.setEnabled(true);
    }
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        jMenu2 = new javax.swing.JMenu();
        jMenuBar2 = new javax.swing.JMenuBar();
        jMenu3 = new javax.swing.JMenu();
        jMenu4 = new javax.swing.JMenu();
        jPopupMenu1 = new javax.swing.JPopupMenu();
        jScrollPane2 = new javax.swing.JScrollPane();
        jList2 = new javax.swing.JList();
        jLabel1 = new javax.swing.JLabel();
        jTextField1 = new javax.swing.JTextField();
        jButton1 = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jList1 = new javax.swing.JList();
        jButton2 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();
        jButton5 = new javax.swing.JButton();
        jButton6 = new javax.swing.JButton();
        jButton7 = new javax.swing.JButton();
        jMenuBar3 = new javax.swing.JMenuBar();
        jMenu5 = new javax.swing.JMenu();
        jMenuItem3 = new javax.swing.JMenuItem();
        jMenu6 = new javax.swing.JMenu();
        jMenuItem4 = new javax.swing.JMenuItem();
        jMenuItem1 = new javax.swing.JMenuItem();

        jMenu1.setText("File");
        jMenuBar1.add(jMenu1);

        jMenu2.setText("Edit");
        jMenuBar1.add(jMenu2);

        jMenu3.setText("File");
        jMenuBar2.add(jMenu3);

        jMenu4.setText("Edit");
        jMenuBar2.add(jMenu4);

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Qsort RMI client");
        setResizable(false);

        jList2.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                jList2MouseReleased(evt);
            }
        });
        jScrollPane2.setViewportView(jList2);

        jLabel1.setText("This application sends a numeric array to a server that sorts the array and sends it back.");

        jTextField1.setText("Write numeric inputs here");
        jTextField1.setMaximumSize(new java.awt.Dimension(4, 16));
        jTextField1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                jTextField1MousePressed(evt);
            }
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                jTextField1MouseReleased(evt);
            }
        });
        jTextField1.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jTextField1KeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                jTextField1KeyReleased(evt);
            }
        });

        jButton1.setText("Add to List");
        jButton1.setEnabled(false);
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jLabel2.setText("The sorting method on the server are invoked by RMI.");

        jList1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                jList1MouseReleased(evt);
            }
        });
        jScrollPane1.setViewportView(jList1);

        jButton2.setText("Move Up");
        jButton2.setEnabled(false);
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jButton3.setText("Move Down");
        jButton3.setEnabled(false);
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jButton4.setText("Remove Element");
        jButton4.setEnabled(false);
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        jButton5.setText("Sort List");
        jButton5.setEnabled(false);
        jButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton5ActionPerformed(evt);
            }
        });

        jButton6.setText("Copy to clipboard");
        jButton6.setEnabled(false);
        jButton6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton6ActionPerformed(evt);
            }
        });

        jButton7.setText("Copy to unsorted list");
        jButton7.setEnabled(false);
        jButton7.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton7ActionPerformed(evt);
            }
        });

        jMenu5.setText("File");

        jMenuItem3.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_Q, java.awt.event.InputEvent.ALT_MASK));
        jMenuItem3.setText("Quit");
        jMenuItem3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem3ActionPerformed(evt);
            }
        });
        jMenu5.add(jMenuItem3);

        jMenuBar3.add(jMenu5);

        jMenu6.setText("Settings");

        jMenuItem4.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_I, java.awt.event.InputEvent.ALT_MASK));
        jMenuItem4.setText("Change IP");
        jMenuItem4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem4ActionPerformed(evt);
            }
        });
        jMenu6.add(jMenuItem4);

        jMenuItem1.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_P, java.awt.event.InputEvent.ALT_MASK));
        jMenuItem1.setText("Change Port");
        jMenuItem1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem1ActionPerformed(evt);
            }
        });
        jMenu6.add(jMenuItem1);

        jMenuBar3.add(jMenu6);

        setJMenuBar(jMenuBar3);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jTextField1, javax.swing.GroupLayout.DEFAULT_SIZE, 215, Short.MAX_VALUE)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 215, Short.MAX_VALUE)
                            .addComponent(jButton1, javax.swing.GroupLayout.DEFAULT_SIZE, 215, Short.MAX_VALUE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jButton5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jButton4, javax.swing.GroupLayout.DEFAULT_SIZE, 178, Short.MAX_VALUE)
                            .addComponent(jButton3, javax.swing.GroupLayout.DEFAULT_SIZE, 178, Short.MAX_VALUE)
                            .addComponent(jButton2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 18, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jButton7, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jButton6, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 214, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addComponent(jLabel2))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 216, Short.MAX_VALUE)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 216, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jButton2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 135, Short.MAX_VALUE)
                        .addComponent(jButton4)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addComponent(jButton6)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 10, Short.MAX_VALUE)
                        .addComponent(jButton7, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jTextField1, javax.swing.GroupLayout.DEFAULT_SIZE, 29, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton1))
                    .addComponent(jButton5, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents


private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
    addNumToList(jTextField1.getText());
}//GEN-LAST:event_jButton1ActionPerformed

private void jTextField1KeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextField1KeyPressed
    limitInputField();
    
    int key = evt.getKeyCode();
    if(key == KeyEvent.VK_ENTER){
        if(jButton1.isEnabled() == true){
            addNumToList(jTextField1.getText());
        }
    }
}//GEN-LAST:event_jTextField1KeyPressed

/* metod för att ändra IP till RMI-servern */
private void jMenuItem4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem4ActionPerformed
    String IP = JOptionPane.showInputDialog("Enter server IP (Default : 193.10.237.105)");
    if(IP != null)
        Client.setIp(IP);
}//GEN-LAST:event_jMenuItem4ActionPerformed

/* metod för att ändra Port till RMI-servern */
private void jMenuItem1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem1ActionPerformed
    try{
    int Port = Integer.parseInt(JOptionPane.showInputDialog("Enter server Port (Default : 32145)"));
    Client.setPort(Port);
    } catch (Exception E) {} 
}//GEN-LAST:event_jMenuItem1ActionPerformed

/* metod för att ändra sortera arrayen, anropar klassen klients metod sendArray */
private void jButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton5ActionPerformed
    long[] arr = getArrayFromList();
    arr = Client.sendArray(arr);
    addSortedArray(arr);
    activateSortedListBtns();
}//GEN-LAST:event_jButton5ActionPerformed

/* dokumenterat ovan */
private void jButton7ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton7ActionPerformed
     moveSortedListToUnsortedList();
}//GEN-LAST:event_jButton7ActionPerformed

/* avaktivera listhanteringsknapparna om man väljer ett element */
private void jList2MouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jList2MouseReleased
    if(!jList2.isSelectionEmpty()){
        if(activeList == 0){
            activateListHandleBtns();
        }
        jList1.clearSelection();
        activeList = 2;
    }
}//GEN-LAST:event_jList2MouseReleased

/* avaktivera listhanteringsknapparna om man väljer ett element */
private void jList1MouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jList1MouseReleased
    if(!jList1.isSelectionEmpty()){
        if(activeList == 0){
            activateListHandleBtns();
        }
        jList2.clearSelection();
        activeList = 1;
    }
}//GEN-LAST:event_jList1MouseReleased

/* Flytta ett element i listan ett steg uppåt */
private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
    if(activeList == 1){
        int idx = jList1.getSelectedIndex();
        if(idx != 0){
            String val = jList1.getSelectedValue().toString();
            try{
                DefaultListModel l = (DefaultListModel) jList1.getModel();
                String val2 = l.getElementAt(idx - 1).toString();
                l.setElementAt(val, idx - 1);
                l.setElementAt(val2, idx);
                jList1.setModel(l);
                jList1.setSelectedIndex(idx - 1);
            } catch (Exception E) {JOptionPane.showMessageDialog(null, "Error!\n"+E);}
        }
    }    
    if(activeList == 2){
        int idx = jList2.getSelectedIndex();
        if(idx != 0){
            String val = jList2.getSelectedValue().toString();
            try{
                DefaultListModel l = (DefaultListModel) jList2.getModel();
                String val2 = l.getElementAt(idx - 1).toString();
                l.setElementAt(val, idx - 1);
                l.setElementAt(val2, idx);
                jList2.setModel(l);
                jList2.setSelectedIndex(idx - 1);
            } catch (Exception E) {JOptionPane.showMessageDialog(null, "Error!\n"+E);}
        }
    }
}//GEN-LAST:event_jButton2ActionPerformed

/* Flytta ett element i listan ett steg nedåt */
private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
    if(activeList == 1){
        int idx = jList1.getSelectedIndex();
        if(idx != jList1.getModel().getSize()  -1 ){
            String val = jList1.getSelectedValue().toString();
            try{
                DefaultListModel l = (DefaultListModel) jList1.getModel();
                String val2 = l.getElementAt(idx + 1).toString();
                l.setElementAt(val, idx + 1);
                l.setElementAt(val2, idx);
                jList1.setModel(l);
                jList1.setSelectedIndex(idx + 1);
            } catch (Exception E) {JOptionPane.showMessageDialog(null, "Error!\n"+E);}
        }
    }    
    if(activeList == 2){
        int idx = jList2.getSelectedIndex();
        if(idx != jList2.getModel().getSize() -1 ){
            String val = jList2.getSelectedValue().toString();
            try{
                DefaultListModel l = (DefaultListModel) jList2.getModel();
                String val2 = l.getElementAt(idx + 1).toString();
                l.setElementAt(val, idx + 1);
                l.setElementAt(val2, idx);
                jList2.setModel(l);
                jList2.setSelectedIndex(idx + 1);
            } catch (Exception E) {JOptionPane.showMessageDialog(null, "Error!\n"+E);}
        }
    }
}//GEN-LAST:event_jButton3ActionPerformed

/* Tar bort ett element i en lista */
private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
    if(activeList == 1){
        DefaultListModel l = (DefaultListModel)jList1.getModel();
        l.removeElementAt(jList1.getSelectedIndex());
        jList1.setModel(l);
        if(jList1.getModel().getSize() < 1){
            disableListHandleBtns();
            disableSortButton();
            activeList = 0;
        }
    }
    if(activeList == 2){
        DefaultListModel l = (DefaultListModel)jList2.getModel();
        l.removeElementAt(jList2.getSelectedIndex());
        jList2.setModel(l);
        if(jList2.getModel().getSize() < 1){
            disableListHandleBtns();
            disableSortedListBtns();
            activeList = 0;
        }
    }
}//GEN-LAST:event_jButton4ActionPerformed

/* Tar bort texten som visas i början för att ta in nummer istället */
private void jTextField1MousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTextField1MousePressed
    if(jTextField1.getText().equals("Write numeric inputs here"))
        jTextField1.setText("");
}//GEN-LAST:event_jTextField1MousePressed

/* Avaktivera lägg-till knappen om textfältet är tomt, aktivera det om det inte är tomt */
private void jTextField1MouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTextField1MouseReleased
    if(jButton1.isEnabled() == false)
        if(!jTextField1.getText().isEmpty())
            jButton1.setEnabled(true);
}//GEN-LAST:event_jTextField1MouseReleased
/* Avaktivera lägg-till knappen om textfältet är tomt, aktivera det om det inte är tomt */
private void jTextField1KeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextField1KeyReleased
    limitInputField();
    if(!jTextField1.getText().isEmpty()){
            jButton1.setEnabled(true);
        } else {
            jButton1.setEnabled(false);
        }
}//GEN-LAST:event_jTextField1KeyReleased

/* Copy to clipboard */
private void jButton6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton6ActionPerformed
    StringSelection stringSelection = null;
    Clipboard clpbrd = null;
    String clipBoard = jList2.getModel().getElementAt(0).toString();
    for(int i = 1; i < jList2.getModel().getSize(); i++){
        clipBoard +="\n"+jList2.getModel().getElementAt(i).toString();
    }
    stringSelection = new StringSelection (clipBoard);
    clpbrd = Toolkit.getDefaultToolkit ().getSystemClipboard ();
    clpbrd.setContents (stringSelection, null);
}//GEN-LAST:event_jButton6ActionPerformed

private void jMenuItem3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem3ActionPerformed
    System.exit(0);
}//GEN-LAST:event_jMenuItem3ActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton5;
    private javax.swing.JButton jButton6;
    private javax.swing.JButton jButton7;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JList jList1;
    private javax.swing.JList jList2;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenu jMenu3;
    private javax.swing.JMenu jMenu4;
    private javax.swing.JMenu jMenu5;
    private javax.swing.JMenu jMenu6;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuBar jMenuBar2;
    private javax.swing.JMenuBar jMenuBar3;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JMenuItem jMenuItem3;
    private javax.swing.JMenuItem jMenuItem4;
    private javax.swing.JPopupMenu jPopupMenu1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTextField jTextField1;
    // End of variables declaration//GEN-END:variables
}
